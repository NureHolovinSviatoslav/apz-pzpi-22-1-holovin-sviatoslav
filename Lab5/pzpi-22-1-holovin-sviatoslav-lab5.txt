Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії










ЗВІТ
з лабораторної роботи №5
з дисципліни "Архітектура програмного забезпечення"
на тему: "РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ"




















Виконав
ст. гр. ПЗПІ-22-1
Головін Святослав Юрійович


Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович
























Харків 2025 р.
1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	11.05.2025
	0.1
	Створено документ, додано завдання та почато опис виконаної роботи.
	2
	11.05.2025
	0.2
	Додано опис функціоналу розгортання бази даних.
	3
	11.05.2025
	0.3
	Додано опис функціоналу розгортання серверної частини.
	4
	11.05.2025
	0.4
	Додано опис функціоналу розгортання iot-клієнта.
	5
	11.05.2025
	0.5
	Додано опис функціоналу розгортання вебклієнта.
	6
	11.05.2025
	0.6
	Додано опис функціоналу розгортання мобільного клієнта.
	________________


2 ЗАВДАННЯ


Розгорнути програмну систему та продемонструвати її роботу.
________________


3 ОПИС ВИКОНАНОЇ РОБОТИ


Для розгортання серверної частини системи використаємо сервіс https://render.com/, що надає послуги для безоплатного розгортування невеликих сервісів. Створимо API додаток, підʼєднавши GitHub репозиторій, увівши потрібні команди для запуску та додавши конфігураційні змінні. Панель керування додатком представлена на відповідному рисунку. Додатково, використовуючи цей же сервіс, створимо та налаштуємо базу даних PostgreSQL 14. Підʼєднаємо створену базу даних до нашої серверної частини через конфігурації оточення. Панель керування базою даних зображена на відповідному малюнку. Варто зазначити, що серверна частина та база даних розгортаються автоматично, після кожної зміни в репозиторії.
IoT та мобільний клієнт розгортаються вручну операторами, використовуючи наявний програмний код у репозиторії.
Для розгортання вебклієнту використаємо сервіс GitHub Pages, що дозволяє безоплатно розгортати статичні сторінки. Налаштуємо директорію для відстежування статичних файлів. Опишемо скрипт, що буде збирати вебклієнт та класти у відповідну директорію. Варто зазначити, що вебклієнт буде розгортатися автоматично, після кожного запуску скрипту. Скрипт додано як відповідний додаток. Панель керування вебклієнтом зображена на відповідному рисунку. Доступ до вебклієнту можна отримати за посиланням: https://nureholovinsviatoslav.github.io/apz-pzpi-22-1-holovin-sviatoslav/.
Для повноцінного розуміння, загальна UML-діаграма розгортання системи представлена на відповідному рисунку. У центрі діаграми розгортання знаходиться локальна машина розробника, на якій у межах проектної директорії виконується скрипт автоматичної доставки: спочатку відбувається побудова фронтенд-компоненту за допомогою npm run build, після чого згенеровані статичні файли копіюються до папки docs репозиторію. Далі всі зміни фіксуються комітами й надсилаються до віддаленого GitHub-репозиторію, який слугує тригером для безперервної інтеграції. Після кожного пушу GitHub надсилає webhook на хмарний сервіс Render.com. Там автоматично створюється контейнер із PostgreSQL версії 14, у якому проганяються міграції для актуалізації структури бази даних, а також запускається бекенд на Node.js. Усі необхідні змінні оточення підтягуються з налаштувань додатку в панелі Render.com, що гарантує коректне з’єднання серверної частини з базою даних та зовнішніми сервісами. Паралельно з цим оновлений фронтенд стає доступним через GitHub Pages, куди репозиторій викладає вміст папки docs. Таким чином, статика фронтенда розміщується на безкоштовному CDN-хостингу, і після кожного нового пушу користувачі одразу ж отримують оновлену версію веб-інтерфейсу. Взаємодія користувача з системою відбувається через браузер: первинно завантажується статичний фронтенд із GitHub Pages, а всі REST-запити до бізнес-логіки адресуються до бекенду на Render.com, який у свою чергу звертається до PostgreSQL для зберігання та вибірки даних. Таким чином, UML-діаграма розгортання демонструє наскрізний потік від локальної збірки та передачі коду в репозиторій до автоматичного розгортання серверної частини із базою даних на Render.com та хостингу фронтенда на GitHub Pages, забезпечуючи безперервність процесу доставки і швидку доступність оновлень для кінцевих користувачів.
Записуємо змістовне відео з описом проєкту, проставляємо таймкоди та завантажуємо на сервіс YouTube. Транскрипція та посилання на відео включено в додаток А.
________________


4 ВИСНОВКИ


        У ході виконання роботи було розгорнуто програмну систему та продемонстровано її роботу.


________________


ДОДАТОК А
ВІДЕОЗАПИС


Відеозапис презентації результатів лабораторної роботи: https://youtu.be/oPW5fGKSSHM


Хронологічний опис відеозапису:
0:00 Представлення студента групи ПЗПІ-22-1 Головіна Святослава Юрійовича.
0:08 Демонстрація лабораторної роботи №5 з дисципліни "Архітектура програмного забезпечення".
0:17 Завдання: розгортання всієї програмної системи та демонстрація її роботи.
0:28 Розгортання бази даних на сервісі Render.
0:39 Обрана версія PostgreSQL, налаштування доступу, автоматичний запуск.
0:52 Інтеграція з GitHub: автоматичне оновлення після кожного коміту.
1:06 Автоматичне розгортання серверної частини Render після змін.
1:19 Перевірка роботи через логін: отримання Access Token.
1:47 Отримання списку користувачів через запит до серверу на Render.
2:09 Arduino-клієнт: завантаження коду і запуск через емулятор.
2:32 Процес конфігурації IoT-клієнта: введення користувача, пароля, локації, періодичності.
3:08 Початок замірів: передача даних на сервер, сповіщення про низький заряд.
3:48 Зростання кількості замірів: підтвердження успішної роботи IoT-клієнта.
4:14 Запуск мобільного клієнта через Android-емулятор.
4:30 Вхід у систему як адміністратор, перегляд і редагування замовлень.
5:06 Мобільний додаток працює з хмарною серверною частиною.
5:14 Налаштування розгортання веб-клієнта через GitHub Pages.
5:27 Автоматичне розгортання статичних файлів при зміні в гілці main.
5:53 Опис скрипта для збирання і розгортання фронтенду.
6:10 Збірка фронтенду, бекенду та деплой усієї системи.
6:35 Демонстрація веб-клієнта в браузері за посиланням.
6:54 Можливість взаємодії з інтерфейсом: перегляд, зміна даних.
7:17 Підсумок: повністю реалізоване розгортання всієї системи.
7:28 Структура звіту: опис розгортання серверної частини, бази даних, мобільного та веб-клієнтів.
8:00 Принцип роботи: локальна збірка → пуш → автоматичне розгортання.
8:17 Огляд можливостей системи: керування вакцинами, локаціями, замовленнями.
8:44 Формування звітів, математична логіка для аналізу заповненості інвентарів.
9:11 Підключення IoT-пристроїв, заміри температури та вологості.
9:34 Надсилання сповіщень операторам при порушеннях умов.
10:10 Можливість експорту/імпорту бази даних, стабільність між середовищами.
10:55 Перенесення користувачів і історичних даних у хмару без ручного втручання.
11:14 Підтримка обмежених прав для користувачів з окремими ролями.
11:30 Завершення демонстрації. Подяка за перегляд.
________________


ДОДАТОК Б
ГРАФІЧНІ МАТЕРІАЛИ


  

Рисунок Б.1 — UML-діаграма розгортання системи


  

Рисунок Б.2 — Панель керування серверною частиною


  

Рисунок Б.3 — Панель керування базою даних
  

Рисунок Б.4 — Панель керування вебклієнтом
________________
ДОДАТОК В
ПРОГРАМНИЙ КОД


В.1 Скрипт розгортання системи.
Репозиторій: https://github.com/NureHolovinSviatoslav/apz-pzpi-22-1-holovin-sviatoslav/blob/main/Lab5/pzpi-22-1-holovin-sviatoslav-lab5/release.sh
  1  #!/usr/bin/env bash
  2  
  3  cd fe
  4  npm run build
  5  cp -r dist/. ../../../docs
  6  
  7  cd ../../../
  8  
  9  git add .
 10  git commit -m "Release version $(date '+%Y-%m-%d %H:%M:%S')"
 11  git push