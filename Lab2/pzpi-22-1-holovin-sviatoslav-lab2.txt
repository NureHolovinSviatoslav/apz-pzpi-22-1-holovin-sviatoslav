Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії










ЗВІТ
з лабораторної роботи №2
з дисципліни "Архітектура програмного забезпечення"
на тему: "Розробка серверної частини системи"






















Виконав
ст. гр. ПЗПІ-22-1
Головін Святослав Юрійович


Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович
























Харків 2025 р.
1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	22.04.2025
	0.1
	Створено документ, додано завдання та почато опис виконаної роботи.
	2
	22.04.2025
	0.2
	Додано опис математичного функціоналу.
	3
	22.04.2025
	0.3
	Додано опис функціоналу для операторів.
	4
	23.04.2025
	0.4
	Додано опис функціоналу для адміністраторів.
	5
	23.04.2025
	0.5
	Додано опис функціоналу для експорту/імпорту бази даних.
	________________


2 ЗАВДАННЯ


Внести зміни в існуючу серверну частину, які будуть містити: математичний функціонал бізнес логіки, функції адміністрування та взаємодії з системою, функціонал імпорту-експорту бази даних.
________________


3 ОПИС ВИКОНАНОЇ РОБОТИ


Перенесено всю попередню серверну частину без жодних змін, а саме: усі моделі, маршрути та сервіси, а також систему авторизації та ролей. Для взаємодії з базою застосовано Sequelize-моделі, серед яких Location, Inventory, InventoryItem, Vaccine, SensorData, Notification, Order, OrderItem та User, зберігаємо наявну валідацію та обробку помилок у catch-блоках, що повертають відповідні HTTP-статуси: 200, 201, 204, 404 або 400.
        Нововведенням є математичний алгоритм для бізнес-логіки формування звіту, що зображено на відповідній діаграмі активностей і котрий працює так: після отримання HTTP-запиту з ідентифікатором локації сервер спершу намагається знайти відповідний запис у таблиці локацій. Якщо локацію не виявлено, обробка миттєво припиняється й клієнту повертається статус 404 із повідомленням про відсутність ресурсу. Коли запис існує, система завантажує всі інвентарі для цієї локації та для кожного інвентаря збирає його позиції разом із даними про вакцини, підраховує сумарну використану кількість доз і формує короткий опис збережених вакцин. Після обробки всіх інвентарів отримані дані об’єднуються з даними локації в підсумковий JSON-звіт, який відправляється клієнту зі статусом 200. У разі будь-якого збою, наприклад проблем із доступом до бази чи під час агрегації, потік переходить у секцію обробки виключень і повертає статус 400 із текстовим поясненням помилки. Цей механізм формування звітів є ключовим складником відповідного розділу для веб-інтерфейсу нашої системи, який даватиме змогу переглядати звіти по обраним локаціям, надаючи операторам повну агреговану інформацію.
        Далі відокремимо операції за ролями кожного користувача системи. У системі виділено три категорії користувачів із жорстко обмеженими правами: операторів, адміністраторів та IoT‑пристрої. Оператори можуть через веб-інтерфейс, мобільний-інтерфейс та відповідні API-ендпоінти переглядати й керувати даними щодо локацій, запасів, елементів інвентарю, замовлень і вакцин, виконувати створення, оновлення й видалення записів у межах бізнес-логіки (із валідацією лімітів та обчисленнями під час змін). Адміністратори, окрім усіх операцій операторів, володіють правом створювати сповіщення та повністю управляти обліковими записами користувачів (створення, змінення, видалення) і мають доступ до всіх існуючих ресурсів без додаткових обмежень. IoT‑пристрої формують окремий клас клієнтів, що автентифікуються з роллю IOT і мають право лише надсилати SensorData через спеціалізований ендпоінт - їхні дані проходять автоматичну перевірку, а у разі критичних відхилень від норми викликається відправка аварійного сповіщення, але доступ до інших API їм закритий. Алгоритм обмеження прав зображено на відповідній діаграмі та він має такий принцип, Коли викликається createAuthMiddleware, функція спершу зважає на системну змінну MODE_TEST. Якщо вона встановлена у true, середовище вважається тестовим: у такому разі метод одразу повертає порожній масив і маршрут працює без жодної автентифікації чи перевірки прав. У звичайному робочому режимі функція формує і повертає масив із двох мідлверів. Перший із них - jwt; він аналізує заголовок запиту, перевіряє чинність JWT‑токена та, у разі успіху, записує отриману інформацію про користувача у req.user. Якщо токен відсутній або некоректний, jwt завершує обробку негайно й відповідає кодом 401 «Unauthorized». Після нього управління переходить до другого мідлвера, умовно названого aclChecker. Він знову звертається до req.user: якщо об’єкт користувача не створено, запит одразу відхиляється з тим самим кодом 401. Коли користувач присутній, aclChecker порівнює його роль із переліком дозволених ролей, переданим у початковому виклику createAuthMiddleware. Якщо роль користувача відсутня або не входить до переліку, повертається відповідь 403 «Forbidden». Лише тоді, коли автентифікація пройшла успішно й роль відповідає вимогам, мідлвер викликає next(), передаючи запит далі - до власне контролера маршруту. Таким чином, потік послідовно забезпечує автентифікацію, авторизацію й чіткий розподіл відповідальності між мідлверами.
        Додатково введемо нову роль керівника базою даних, який матиме змогу робити експорт та імпорт даних через спеціалізовані ендпоінти. Алгоритм експорту починається з отримання запиту POST /backup/export, у якому клієнт передає пароль; сервер перевіряє наявність поля password і у разі відсутності негайно повертає HTTP 400 з повідомленням «password required». Якщо пароль наявний, система виконує топологічне сортування моделей за залежностями між таблицями, послідовно зчитує всі записи з кожної моделі, збирає їх у єдиний об’єкт, серіалізує у JSON та шифрує отриманий рядок функцією encrypt із використанням пароля користувача. Зашифровані дані повертаються у тілі відповіді у форматі { "db": "<encrypted_data>" } зі статусом 200. На діаграмі активностей цей процес відображено як послідовність кроків від перевірки пароля до шифрування й відправки відповіді. Під час імпорту клієнт надсилає POST /backup/import із полями password та data; сервер спершу перевіряє їхню наявність і, якщо будь‑яке відсутнє, повертає HTTP 400 з текстом «password and data required». Далі відбувається спроба дешифрування через decrypt: некоректний пароль або пошкоджені дані призводять до HTTP 400 «invalid password or corrupted data». Після успішного розшифрування та парсингу JSON система повторно визначає порядок моделей, відкриває транзакцію й у зворотному порядку очищує таблиці через truncate з cascade, а потім у прямому порядку виконує bulkCreate валідованих записів. У разі помилки всередині транзакції відбувається ROLLBACK із відповіддю HTTP 500 «restore failed», а за відсутності помилок транзакція фіксується й сервер надсилає HTTP 200 «restored». На діаграмі активностей імпорт відображено як ланцюжок перевірок, операцій з видалення, вставки та коміту або скасування змін. Обидва алгоритми представлені на відповідній діаграмі.
        Записуємо змістовне відео з описом проєкту, проставляємо таймкоди та завантажуємо на сервіс YouTube. Транскрипція та посилання на відео включено в додаток А.
________________


4 ВИСНОВКИ


        У ході виконання роботи було внесено зміни в існуючу серверну частину, які будуть містять: математичний функціонал бізнес логіки, функції адміністрування та взаємодії з системою, функціонал імпорту-експорту бази даних.


________________


ДОДАТОК А
ВІДЕОЗАПИС


Відеозапис презентації результатів лабораторної роботи: https://youtu.be/9-CQcoxTXOI


Хронологічний опис відеозапису:
0:00 Представлення студента групи ПЗПІ-22-1 Головіна Святослава.
0:04 Демонстрація лабораторної роботи №2 з предмету "Архітектура програмного забезпечення".
0:12 Опис доробки серверної частини: підтримка мобільного та веб-застосунків.
0:27 Впровадження ролей користувачів: адміністратор, ІТ, оператор, голова бази даних.
1:00 Запуск сервера у тестовому режимі, створення тестових користувачів.
1:24 Пояснення необхідності авторизації: логін, отримання токену.
1:56 Виконання операцій від імені адміністратора.
2:06 Створення користувача з роллю голови бази даних.
2:20 Створення користувача з роллю оператора.
2:42 Спроба виконати недоступну дію як оператор — заборона.
3:00 Демонстрація доступних оператору дій: перегляд вакцин.
4:05 Підтвердження розмежування ролей у системі.
4:19 Додавання функціоналу для генерації звітів.
4:41 Створення локації та складу через інтерфейс.
5:38 Додавання вакцин у склад: 10 та 15 одиниць.
6:28 Генерація агрегованого звіту по локації.
6:45 Налаштування та масові операції з базою даних.
7:02 Логін як голова бази даних.
7:25 Виконання експорту бази з використанням паролю.
8:03 Повторна авторизація через помилку з токеном.
8:46 Успішне отримання зашифрованої копії бази даних.
9:02 Зміна кількості предметів у складі перед імпортом.
10:12 Імпорт бази: повернення до попереднього стану.
10:55 Перевірка результату — кількість предметів оновлена.
11:00 Демонстрація помилки при імпорті з некоректним паролем.
11:15 Завершення демонстрації. Подяка за перегляд.
________________


ДОДАТОК Б
ГРАФІЧНІ МАТЕРІАЛИ


  

Рисунок Б.1 - Діаграма станів для математичного функціоналу формування звітів


  

Рисунок Б.2 - Діаграма станів для алгоритму перевірки доступу в систему


  

Рисунок Б.3 - Діаграма станів для алгоритму експорту бази даних


  

Рисунок Б.4 - Діаграма станів для алгоритму імпорту бази даних
________________
ДОДАТОК В
ПРОГРАМНИЙ КОД


В.1 Маршрути backup.
Репозиторій: https://github.com/NureHolovinSviatoslav/apz-pzpi-22-1-holovin-sviatoslav/blob/main/Lab2/pzpi-22-1-holovin-sviatoslav-lab2/routes/backup.js
 1  const express = require('express');
  2  const { sequelize } = require('../services/db');
  3  const { encrypt, decrypt } = require('../services/secureText');
  4  const { createAuthMiddleware } = require('../services/createAuthMiddleware');
  5  const { roles } = require('../services/roles');
  6  
  7  const json = express.json({ limit: '150mb' });
  8  const router = express.Router();
  9  
 10  function topo(models) {
 11    const byTable = Object.fromEntries(models.map((m) => [m.getTableName(), m]));
 12  
 13    const graph = new Map();
 14    models.forEach((m) => {
 15      const deps = new Set();
 16  
 17      Object.values(m.rawAttributes).forEach((attr) => {
 18        const ref = attr.references?.model;
 19        if (!ref) return;
 20  
 21        const target = typeof ref === 'string' ? byTable[ref] : ref;
 22  
 23        if (target && target !== m) deps.add(target.name);
 24      });
 25  
 26      graph.set(m.name, deps);
 27    });
 28  
 29    const ordered = [];
 30    const temp = new Set();
 31  
 32    function dfs(name) {
 33      if (ordered.includes(name)) return;
 34      if (temp.has(name)) return;
 35      temp.add(name);
 36      graph.get(name).forEach(dfs);
 37      temp.delete(name);
 38      ordered.push(name);
 39    }
 40  
 41    [...graph.keys()].forEach(dfs);
 42    return ordered.map((n) => models.find((m) => m.name === n));
 43  }
 44  
 45  async function exp(req, res) {
 46    const { password } = req.body || {};
 47    if (!password) return res.status(400).send('password required');
 48  
 49    const models = topo(Object.values(sequelize.models));
 50    const dump = {};
 51    for (const m of models) dump[m.name] = await m.findAll({ raw: true });
 52  
 53    const encrypted = encrypt(JSON.stringify(dump), password);
 54    res.json({ db: encrypted });
 55  }
 56  
 57  async function imprt(req, res) {
 58    const { password, data } = req.body || {};
 59    if (!password || !data)
 60      return res.status(400).send('password and data required');
 61    let payload;
 62    try {
 63      payload = JSON.parse(decrypt(data, password));
 64    } catch {
 65      return res.status(400).send('invalid password or corrupted data');
 66    }
 67    const models = topo(Object.values(sequelize.models));
 68    const rev = [...models].reverse();
 69    await sequelize.transaction(async (t) => {
 70      for (const m of rev)
 71        await m.destroy({ truncate: true, cascade: true, transaction: t });
 72      for (const m of models)
 73        await m.bulkCreate(payload[m.name] || [], {
 74          validate: true,
 75          transaction: t,
 76        });
 77    });
 78    res.send('restored');
 79  }
 80  
 81  router.post('/import', ...createAuthMiddleware([roles.DBO]), imprt);
 82  router.post('/export', ...createAuthMiddleware([roles.DBO]), exp);
 83  
 84  module.exports = { router };


В.2 Маршрути location.
Репозиторій: https://github.com/NureHolovinSviatoslav/apz-pzpi-22-1-holovin-sviatoslav/blob/main/Lab2/pzpi-22-1-holovin-sviatoslav-lab2/routes/location.js
 1  'use strict';
  2  
  3  const { Inventory } = require('../models/Inventory');
  4  const { InventoryItem } = require('../models/InventoryItem');
  5  const { Vaccine } = require('../models/Vaccine');
  6  const { Location } = require('../models/Location');
  7  const { SensorData } = require('../models/SensorData');
  8  const express = require('express');
  9  const { createAuthMiddleware } = require('../services/createAuthMiddleware');
 10  const { roles } = require('../services/roles');
 11  
 12  const router = express.Router();
 13  
 14  const getAll = async (req, res) => {
 15    try {
 16      const locations = await Location.findAll();
 17      res.send(locations);
 18    } catch (err) {
 19      res.status(400).send(err.message);
 20    }
 21  };
 22  
 23  const getOne = async (req, res) => {
 24    const { id } = req.params;
 25  
 26    try {
 27      const location = await Location.findByPk(parseInt(id));
 28      if (!location) {
 29        return res.status(404).send('Location not found');
 30      }
 31      res.send(location);
 32    } catch (err) {
 33      res.status(400).send(err.message);
 34    }
 35  };
 36  
 37  const add = async (req, res) => {
 38    const locationData = { ...req.body };
 39  
 40    try {
 41      const location = await Location.create(locationData);
 42      res.status(201).send(location);
 43    } catch (err) {
 44      res.status(400).send(err.message);
 45    }
 46  };
 47  
 48  const update = async (req, res) => {
 49    const { id } = req.params;
 50    const locationData = { ...req.body };
 51  
 52    try {
 53      await Location.update(locationData, {
 54        where: { location_id: parseInt(id) },
 55      });
 56      const location = await Location.findByPk(parseInt(id));
 57      if (!location) {
 58        return res.status(404).send('Location not found');
 59      }
 60      res.send(location);
 61    } catch (err) {
 62      res.status(400).send(err.message);
 63    }
 64  };
 65  
 66  const remove = async (req, res) => {
 67    const { id } = req.params;
 68  
 69    try {
 70      await Inventory.destroy({
 71        where: { location_id: parseInt(id) },
 72      });
 73      await SensorData.destroy({
 74        where: { location_id: parseInt(id) },
 75      });
 76      const deleted = await Location.destroy({
 77        where: { location_id: parseInt(id) },
 78      });
 79      if (!deleted) {
 80        return res.status(404).send('Location not found');
 81      }
 82      res.status(204).send({});
 83    } catch (err) {
 84      res.status(400).send(err.message);
 85    }
 86  };
 87  
 88  const getReport = async (req, res) => {
 89    const { id } = req.params;
 90  
 91    try {
 92      const location = await Location.findByPk(parseInt(id));
 93      if (!location) {
 94        return res.status(404).send('Location not found');
 95      }
 96  
 97      const inventories = await Inventory.findAll({
 98        where: { location_id: parseInt(id) },
 99      });
100      const inventoryItems = await Promise.all(
101        inventories.map(async (inventory) => {
102          const itemWithVaccine = await InventoryItem.findAll({
103            where: { inventory_id: inventory.inventory_id },
104            include: Vaccine,
105          });
106  
107          return {
108            inventory_id: inventory.inventory_id,
109            max_quantity: inventory.max_quantity,
110            used_quantity: itemWithVaccine.reduce(
111              (acc, item) => acc + item.quantity,
112              0,
113            ),
114            stored_vaccines: itemWithVaccine.map((item) => ({
115              vaccine_id: item.vaccine_id,
116              name: item.vaccine.name,
117              description: item.vaccine.description,
118              quantity: item.quantity,
119            })),
120          };
121        }),
122      );
123  
124      res.send({
125        location_id: location.location_id,
126        name: location.name,
127        address: location.address,
128        inventories: inventoryItems,
129      });
130    } catch (err) {
131      res.status(400).send(err.message);
132    }
133  };
134  
135  router.get(
136    '/',
137    ...createAuthMiddleware([roles.STAFF, roles.ADMIN, roles.DBO]),
138    getAll,
139  );
140  router.get(
141    '/:id',
142    ...createAuthMiddleware([roles.STAFF, roles.ADMIN, roles.DBO]),
143    getOne,
144  );
145  router.get(
146    '/:id/report',
147    ...createAuthMiddleware([roles.STAFF, roles.ADMIN, roles.DBO]),
148    getReport,
149  );
150  router.post(
151    '/',
152    ...createAuthMiddleware([roles.STAFF, roles.ADMIN, roles.DBO]),
153    add,
154  );
155  router.patch(
156    '/:id',
157    ...createAuthMiddleware([roles.STAFF, roles.ADMIN, roles.DBO]),
158    update,
159  );
160  router.delete(
161    '/:id',
162    ...createAuthMiddleware([roles.STAFF, roles.ADMIN, roles.DBO]),
163    remove,
164  );
165  
166  module.exports = { router };


В.3 Сервіс createAuthMiddleware.
Репозиторій: https://github.com/NureHolovinSviatoslav/apz-pzpi-22-1-holovin-sviatoslav/blob/main/Lab2/pzpi-22-1-holovin-sviatoslav-lab2/services/createAuthMiddleware.js
 1  const { jwt } = require('./jwt');
  2  
  3  function createAuthMiddleware(roles) {
  4    if (process.env.MODE_TEST === 'true') {
  5      return [];
  6    }
  7  
  8    return [
  9      jwt,
 10      (req, res, next) => {
 11        const user = req.user;
 12  
 13        if (!user) {
 14          return res.status(401).json({ message: 'Unauthorized' });
 15        }
 16        if (!user.role || !roles.includes(user.role)) {
 17          return res.status(403).json({ message: 'Forbidden' });
 18        }
 19  
 20        next();
 21      },
 22    ];
 23  }
 24  
 25  module.exports = { createAuthMiddleware };


В.4 Сервіс jwt.
Репозиторій: https://github.com/NureHolovinSviatoslav/apz-pzpi-22-1-holovin-sviatoslav/blob/main/Lab2/pzpi-22-1-holovin-sviatoslav-lab2/services/jwt.js
 1  const jwtLib = require('jsonwebtoken');
  2  
  3  function jwt(req, res, next) {
  4    const authHeader = req.headers['authorization'];
  5    const token = authHeader && authHeader.split(' ')[1]; // 'Bearer TOKEN'
  6  
  7    if (!token) {
  8      return res
  9        .status(401)
 10        .json({ message: 'Access token is missing or invalid' });
 11    }
 12  
 13    jwtLib.verify(token, process.env.JWT_SECRET, (err, user) => {
 14      if (err) {
 15        return res.status(403).json({ message: 'Token verification failed' });
 16      }
 17  
 18      req.user = user;
 19      next();
 20    });
 21  }
 22  
 23  module.exports = { jwt };


В.5 Сервіс secureText.
Репозиторій: https://github.com/NureHolovinSviatoslav/apz-pzpi-22-1-holovin-sviatoslav/blob/main/Lab2/pzpi-22-1-holovin-sviatoslav-lab2/services/secureText.js
 1  const crypto = require('crypto');
  2  
  3  const SALT = 16;
  4  const IV = 12;
  5  const KEY = 32;
  6  const ITER = 100000;
  7  const ALG = 'aes-256-gcm';
  8  
  9  const derive = (pwd, salt) => crypto.pbkdf2Sync(pwd, salt, ITER, KEY, 'sha512');
 10  
 11  const encrypt = (plain, pwd) => {
 12    const salt = crypto.randomBytes(SALT);
 13    const iv = crypto.randomBytes(IV);
 14    const key = derive(pwd, salt);
 15    const c = crypto.createCipheriv(ALG, key, iv);
 16    const enc = Buffer.concat([c.update(plain, 'utf8'), c.final()]);
 17    const tag = c.getAuthTag();
 18    return Buffer.concat([salt, iv, tag, enc]).toString('base64');
 19  };
 20  
 21  const decrypt = (b64, pwd) => {
 22    const buf = Buffer.from(b64, 'base64');
 23    const salt = buf.slice(0, SALT);
 24    const iv = buf.slice(SALT, SALT + IV);
 25    const tag = buf.slice(SALT + IV, SALT + IV + 16);
 26    const data = buf.slice(SALT + IV + 16);
 27    const key = derive(pwd, salt);
 28    const d = crypto.createDecipheriv(ALG, key, iv);
 29    d.setAuthTag(tag);
 30    return Buffer.concat([d.update(data), d.final()]).toString('utf8');
 31  };
 32  
 33  module.exports = { encrypt, decrypt };